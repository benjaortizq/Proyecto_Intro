#                   PROYECTO DE BOMBERMAN 
#                  BENJAMIN ORTIZ 2025064599
#                  STEADMAN MURILLO 2025097768
#           IC-1802 INTRODUCCION A LA PROGRAMACION 
#                     I SEMESTRE DE 2025


import pygame as pg
import time as t
import threading as th
import random 
import sys 
import json
#pinche benja
#Aqui epiezan las clases del juego  
#----------------------------------------------------------CLASES UTILES DE PYGAME---------------------------------------
class Reloj(th.Thread):
    def __init__(self, tiempo_inicial):
        super().__init__()
        self.tiempo = tiempo_inicial
        self.en_marcha = True
        self.isDaemon = False  # Para que el hilo se cierre con el programa principal
        self.pausado = False
        self.lock = th.Lock()  # Para sincronización
        
    def run(self):
        while self.en_marcha and self.tiempo > 0:
            with self.lock:
                if not self.pausado:
                    t.sleep(0.85)  # soy un ijueputa
                    self.tiempo -= 1
                    
    def detener(self):
        self.en_marcha = False
        
    def pausar(self):
        self.pausado = True
        
    def reanudar(self):
        self.pausado = False

# Clase SpriteSheet: Carga una hoja de sprites y permite obtener imágenes individuales.
class SpriteSheet (): 
    def __init__(self, image): 
        self.sheet = image  # Carga la imagen de la hoja de sprites
    
    def get_image(self, frame, width, height, scale, colour):
        image = pg.Surface((width, height)).convert_alpha()     # Crea una superficie para el frame
        image.blit(self.sheet, (0, 0), ((frame * width), 0, width, height))  # Copia el frame correspondiente de la hoja de sprites
        image = pg.transform.scale(image, (width * scale, height * scale))  # Escala la imagen al tamaño deseado
        image.set_colorkey(colour)      # Establece el color clave para hacer transparente el fondo

        return image
#CLASE BOTON: Representa un botón en la interfaz del juego.
class Boton : 
    def __init__(self, x, y, width, height, text, font,size, color, hover_color ):    # '"ALERTA  : EN FONT TIENE QUE RECIBIR LA STRING DE LA DIRECCION DE LA FUENTE, POR EJEMPLO "fonts/arial.ttf"'
        self.rect = pg.Rect(x, y, width, height)  # Crea un rectángulo para el botón
        self.text = text  # Texto del botón
        self.font = pg.font.Font(font,size)  # Fuente del texto
        self.color = color 
        self.size = size # Color normal del botón
        self.hover_color = hover_color  # Color al pasar el mouse sobre el botón
        self.last_mouse_state  = None   # Tipo de acción (por ejemplo, cambiar de estado)
    def check_click(self):
        mouse_pos = pg.mouse.get_pos()
        mouse_pressed = pg.mouse.get_pressed()[0]
        # Detectar solo el momento exacto cuando se presiona el botón  
        if self.rect.collidepoint(mouse_pos):
            if mouse_pressed and not self.last_mouse_state:  # Solo en el frame del clic inicial
                return True  # Retorna True si el botón fue presionado
            return False
        return False

    def draw(self, surface):
        mouse_pos = pg.mouse.get_pos()  # Obtiene la posición del mouse
        if self.rect.collidepoint(mouse_pos):  # Verifica si el mouse está sobre el botón
            pg.draw.rect(surface, self.hover_color, self.rect,int(self.size*0.55),int(self.size*0.2))  # Dibuja el botón con el color de hover
        else:
            pg.draw.rect(surface, self.color, self.rect,int(self.size*0.55),int(self.size*0.2))  # Dibuja el botón con el color normal
          # Establece el tamaño de la fuente
        text_surface = self.font.render(self.text, True, (255, 255, 255))  # Renderiza el texto del botón
        text_rect = text_surface.get_rect(center=self.rect.center)  # Centra el texto en el botón
        surface.blit(text_surface, text_rect)  # Dibuja el texto en la superficie

class HealthBar:
    def __init__(self, x, y, width, height, hp,color_f,color_h):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.hp = hp  # Salud actual del jugador
        self.color_f = color_f
        self.color_h = color_h  # Color de la barra de salud    
    def draw(self, surface):
        ratio= self.hp / 100 # Calcula la proporción de salud actual respecto a la máxima
        pg.draw.rect(surface, self.color_f, (self.x, self.y, self.width, self.height))  # Dibuja el fondo de la barra de salud   
        pg.draw.rect(surface, self.color_h, (self.x, self.y, self.width * ratio, self.height))

class Healthbar_Player (HealthBar) :
    def __init__(self, x, y, width, height, hp, heart_texture, cant_vidas, font):
        super().__init__(x, y, width, height, hp, (255, 0, 0), (0, 255, 0))  # Llama al constructor de HealthBar con colores por defecto
        self.heart_texture = heart_texture  # Textura del corazón para la barra de salud
        self.cant_vidas = cant_vidas  # Cantidad de vidas del jugador
        self.font = font  # Fuente para mostrar la cantidad de vidas
    def draw_atributes(self, surface):
        surface.blit(self.heart_texture, (self.x - heart_texture.get_width()-3, self.y-5))  # Dibuja el corazón en la barra de salud
        vidas=self.font.render (f"x {self.cant_vidas}", True, (255, 255, 255)) # Renderiza la cantidad de vidas del jugador
        surface.blit(vidas, (self.x - heart_texture.get_width()-32, self.y+5))  # Dibuja la cantidad de vidas en la barra de salud


# -------------------------------------------------------CLASES DEL JUEGO-------------------------------------------
# Clase Jugador: Representa al jugador en el juego.

class Jugador : 
    def __init__(self, area_juego, pos_x, pos_y, velocidad, sps_idle,sps_mover,sps_hab,sps_muerte, frames_idle,frames_mover,frames_hab, frames_muerte, frame_w,frame_h, scale, colour): 
        self.area_juego = area_juego #superficie del juego donde se dibuja el jugador
        self.x = pos_x
        self.y = pos_y
        self.velocidad = velocidad              #velocidad del jugador
        self.states = {  
            "idle": (sps_idle, frames_idle),
            "mover": (sps_mover, frames_mover),
            "hab":   (sps_hab,   frames_hab),
            "muerte":(sps_muerte,frames_muerte),
        }
        self.width_frame = frame_w
        self.height_frame = frame_h   #esto siempre es estatico. como las spritesheets son horizontales entonces esto que qeuda asi . 
        self.scale = scale       
        self.frames_muerte=frames_muerte                       #multiplicador de escala para el sprite
        self.colour = colour                  #color de fondo del sprite que se va a eliminar  
        self.state = "idle"
        self.current_spritesheet, self.frame_count = self.states[self.state]
        self.current_frame  = 0
        self.last_update    = t.time()
        self.last_move_time = t.time() 
        self.current_skin = self.current_spritesheet.get_image(0, 32, 32, scale, colour)
        self.mask= pg.mask.from_surface(self.current_skin)  # Crea una máscara del sprite actual para colisiones
        self.muerto=False
        self.can_always_move=False
        self.facing_left = False 
        
    
    def set_state(self, new_state):
        
        if new_state == self.state:
            return
        self.state = new_state
        self.current_spritesheet, self.frame_count = self.states[new_state]
        self.current_frame  = 0
        self.last_update    = t.time()
 #reinicia el tiempo de la ultima actualizacion para que no se salte frames al cambiar de spritesheet
    
    def animacion_skin(self) : 
      now = t.time()
      if now - self.last_update > 0.1:
           self.last_update  = now
           self.current_frame = (self.current_frame + 1) % self.frame_count
      img=self.current_spritesheet.get_image(self.current_frame,self.width_frame,self.height_frame,self.scale,self.colour)
      if self.facing_left : 
           img=pg.transform.flip(img,True,False) 
      img.set_colorkey (self.colour)
      self.current_skin = img
      self.mask = pg.mask.from_surface(self.current_skin)
          

    def colisiona_con(self, otro_objeto):
        # Calcular diferencia de posiciones (offset)
        offset_x = int(otro_objeto.x) - int(self.x)
        offset_y = int(otro_objeto.y) - int(self.y)
        return self.mask.overlap(otro_objeto.mask, (offset_x, offset_y)) is not None
    
    def mover(self, obstacles):
          now=t.time()
          global obstacles_R
          keys = pg.key.get_pressed()
          dx = (keys[pg.K_RIGHT] - keys[pg.K_LEFT]) * self.velocidad
          dy = (keys[pg.K_DOWN]  - keys[pg.K_UP])   * self.velocidad
          if dx < 0 : 
               self.facing_left = True 
          else: 
               self.facing_left = False 
          if dx != 0 or dy != 0:
            self.last_move_time = now

          # Calcular nueva posición
          nueva_x = self.x + dx
          nueva_y = self.y + dy
          max_x = self.area_juego.get_width()  -40
          max_y = self.area_juego.get_height() -40
          nueva_x = max(0, min(nueva_x, max_x))
          nueva_y = max(0, min(nueva_y, max_y))


          # Verificar si habría colisión en la nueva posición
          if self.can_always_move : 
               candidatos = [o for o in obstacles if o not in obstacles_R]
          else: 
               candidatos = obstacles
          colision = False
          for obst in candidatos :
               offset_x = int(obst.x - nueva_x)
               offset_y = int(obst.y - nueva_y)
               if self.mask.overlap(obst.mask, (offset_x, offset_y)):
                    colision = True
                    break
          else : 
               colision= False
          # Si no hay colisión, actualiza posición
          if not colision:
               self.x = nueva_x
               self.y = nueva_y
          self.ejecutar_habilidad()
          if self.ejecutando_habilidad:
               self.set_state("hab")
          else:
               if hasattr(self, "muerto") and self.muerto:
                    self.set_state("muerte")
               elif dx != 0 or dy != 0:
                    self.set_state("mover")
               elif now - self.last_move_time > 0.2:
                    self.set_state("idle")


          self.animacion_skin()

          # Siempre se dibuja
          self.area_juego.blit(self.current_skin, (self.x, self.y))
class Jugador_1(Jugador): #clase hija de jugador, que hereda de la clase padre
    def __init__(self, area_juego, pos_x, pos_y, velocidad,sps_idle,sps_mover,sps_hab,sps_muerte, frames_idle,frames_mover,frames_hab, frames_muerte, frame_w,frame_h, scale, colour,habilidad, cant_vidas,color_habilidad, color_bajada ):
        super().__init__( area_juego, pos_x, pos_y, velocidad, sps_idle,sps_mover,sps_hab,sps_muerte, frames_idle,frames_mover,frames_hab, frames_muerte, frame_w,frame_h, scale, colour)
        self.habilidad=habilidad
        self.vida=97 #vida del jugador
        self.ejecutando_habilidad = False
        self.tiempo_inicio_habilidad = 0
        self.max_tiempo_habilidad = 5  # 5 segundos máximo
        self.cant_vidas = cant_vidas  # Cantidad de vidas del jugador
        self.color_habilidad = color_habilidad  # Color de la habilidad
        self.color_subiendo =color_habilidad
        self.barra_habilidad = 0  # Tiempo de recarga de la habilidad
        self.color_bajada=color_bajada
        self.powerups= {"dano" : 0 , "vida":0}
        self.items = {"bombas":1000, "velocidad" : 8 ,"escudo":2 }
        self.powerup_en_uso={"dano": False, "vida": False}
        self.item_en_uso={"bombas":False, "velocidad" : False ,"escudo":False }
        self.tiene_llave=False
        self.ultima_bomba=0
    def ejecutar_habilidad(self ) :
        keys = pg.key.get_pressed()
        current_time = t.time()
        # Iniciar habilidad al presionar espacio
        if keys[pg.K_SPACE] and not self.ejecutando_habilidad and self.barra_habilidad >50:
            self.ejecutando_habilidad = True
            self.tiempo_inicio_habilidad = current_time
            self.set_state("hab")
            print(f"Iniciando habilidad: {self.habilidad}")
        
        # Detener si pasa el tiempo máximo
        if self.ejecutando_habilidad:
            tiempo_transcurrido = current_time - self.tiempo_inicio_habilidad
            self.barra_habilidad -=1 if self.barra_habilidad >= 1 else self.barra_habilidad==1
            self.color_habilidad = self.color_bajada
            if self.habilidad=="Invencible" : 
                 self.can_always_move=True
            
            if tiempo_transcurrido > self.max_tiempo_habilidad or int(self.barra_habilidad)==0:
                self.ejecutando_habilidad = False
                self.can_always_move=False
                self.set_state("idle")
                print("Habilidad detenida por tiempo máximo")

        if not self.ejecutando_habilidad:
            self.color_habilidad=self.color_subiendo
            self.barra_habilidad = min(self.barra_habilidad + 1, 100)   #ni idea porque co 99 sirve pero con ese numero me deja la barra en 100 maximo xd  
    def usar_bomba(self):
             global matriz
             tiempo_actual=t.time()
             if self.items.get("bombas") > 0:
                 keys = pg.key.get_pressed()
                 if keys[pg.K_b] and tiempo_actual-self.ultima_bomba>=2:
                     centro_x = self.x + 16
                     centro_y = self.y + 16
                     col = int(centro_x // 48)
                     fila = int(centro_y // 48 )                      
                     Bomba_R = Bomba_Matriz(self.area_juego, (self.x+16) ,(self.y+16), spritesheet_Bomba, 5, 64, 64, 0.75, 'black', True)
                     lista_B.append(Bomba_R)
                     


                     matriz[fila][col] = 0 #if matriz[(self.y+24) // 48][(self.x+24) // 48] = *  
                     self.items["bombas"] -= 1
                     print(f"Jugador en píxeles: ({self.x},{self.y})  →  celda: ({fila},{col})")
                     self.ultima_bomba = tiempo_actual


#ocupo tipo scar tiempo. si en 0,5s no se presiona ninguna tecla entonces el sprote es el statico, si en n se presiona deacruerdo al movimiento cambia el sprite. sis e presiona el de habiliad, entones se muestra el speiret habilidad.
#_____________________________________________________________________________________________________
#CLASES DE LA MATRIZ O ENEMIGOS
#Clase Obstaculo 
class Obstaculo:
    def __init__(self, screen, x, y, texture):
        self.screen = screen
        self.x = x
        self.y = y
        self.texture = texture
        self.mask    = pg.mask.from_surface(self.texture)
        
    def draw(self):
        self.screen.blit(self.texture, (self.x, self.y))

    def colisiona_con(self, otro_objeto):
     # Calcular diferencia de posiciones (offset)
     offset_x = int(otro_objeto.x) - int(self.x)
     offset_y = int(otro_objeto.y) - int(self.y)
     return self.mask.overlap(otro_objeto.mask, (offset_x, offset_y)) is not None

#Class Enemigos
#Screen = area_juego
class Enemigos:
     def __init__(self, screen, x, y, velocidad, spritesheet_walk, spritesheet_death, frame_count, frame_w,frame_h, scale, colour, muerte,dir):
          self.screen = screen
          self.x = x
          self.y = y
          self.velocidad = velocidad
          self.current_spritesheet = spritesheet_walk
          self.frame_count = frame_count          #CAANTIDAD DE FRAMES DE LA SKIN DEL JUGAODR
          self.width_frame = frame_w
          self.height_frame = frame_h   #esto siempre es estatico. como las spritesheets son horizontales entonces esto que qeuda asi . 
          self.scale = scale                              #multiplicador de escala para el sprite
          self.colour = colour                  #color de fondo del sprite que se va a eliminar
          self.last_update = t.time()     #tiempo de la ultima actualizacion del frame
          self.current_frame = 0        #numero de frame que esta actualmente dibujandose.
          self.current_skin = self.current_spritesheet.get_image(0, 48, 48, self.scale, self.colour)
          self.mask= pg.mask.from_surface(self.current_skin)
          self.dir = dir
          self.spritesheet_death = spritesheet_death
          self.muerte = muerte
          

     def animacion_muerte(self):
          self.cambiar_spritesheet(self.spritesheet_death)
          self.muerte = True
          self.velocidad = 0
          self.animacion_skin()
 
    #line_of_sight
     def move(self):
        self.animacion_skin()
        # HORIZONTAL: dir 0 ← , dir 1 →
        if self.dir in (0, 1):
            
            dx = -self.velocidad if self.dir == 0 else self.velocidad
            new_x = self.x + dx
            if dx < 0:
                 self.current_skin = pg.transform.flip(self.current_skin, True, False)
                 self.current_skin.set_colorkey('black')

            if new_x <= 0:
                 self.dir = 1
            if new_x >= 770:
                 self.dir = 0
            # límites de pantalla
            if 0 < new_x < 770:
                self.x = new_x
        # VERTICAL: dir 2 ↑ , dir 3 ↓
        elif self.dir in (2, 3):
            dy = -self.velocidad if self.dir == 2 else self.velocidad
            new_y = self.y + dy
            if new_y <= 0:
                 self.dir = 3
            if new_y >= 480:
                 self.dir = 2
            if 0 < new_y < 480:
                self.y = new_y

        # Dibujo
        self.screen.blit(self.current_skin, (self.x, self.y))

     def auto_move(self):
                    self.move()
                    
                 
     def rebote(self):
          #solo rebota su hay una pared
          self.dir ^= 1          

     def cambiar_spritesheet(self, nuevo_spritesheet): #esto es para cambiar la spritesheet del jugador, por ejemplo cuando se ejecuta una habilidad
          self.current_spritesheet = nuevo_spritesheet #cambia el spritesheet actual al nuevo
          self.current_frame = 0  #reinicia el frame actual a 0
          self.last_update = t.time()     #reinicia el tiempo de la ultima actualizacion para que no se salte frames al cambiar de spritesheet
    
     def animacion_skin(self) : 
        current_time = t.time()
        if self.muerte:
             if current_time - self.last_update > 0.5 : # Cambio de frame cada 0.2 segundos
                    self.last_update = current_time
                    self.current_frame = ((self.current_frame + 1) % self.frame_count)          #El digamos asi "numero" de frame que esta actualmente dibujandose. 
             self.current_skin = self.current_spritesheet.get_image( self.current_frame, self.width_frame,  self.height_frame, self.scale, self.colour)
             self.mask = pg.mask.from_surface(self.current_skin)
             if self.current_frame == 2:
                Lista_Enemigos_1.remove(self)
                  
        else:
          if current_time - self.last_update > 0.1 : # Cambio de frame cada 0.2 segundos
               self.last_update = current_time
               self.current_frame = ((self.current_frame + 1) % self.frame_count)          #El digamos asi "numero" de frame que esta actualmente dibujandose. 
          self.current_skin = self.current_spritesheet.get_image( self.current_frame, self.width_frame,  self.height_frame, self.scale, self.colour)
          self.mask = pg.mask.from_surface(self.current_skin)
    
     def colisiona_con(self, otro_objeto):
        # Calcular diferencia de posiciones (offset)
        offset_x = int(otro_objeto.x) - int(self.x)
        offset_y = int(otro_objeto.y) - int(self.y)
        return self.mask.overlap(otro_objeto.mask, (offset_x, offset_y)) is not None
     
#Class Bomba_sprite
class Bomba:
    
     def __init__(self, screen, x, y, spritesheet_bomba, frame_count, frame_w,frame_h, scale, colour, explosion):
          self.screen = screen
          self.x = x
          self.y = y
          self.current_spritesheet = spritesheet_bomba
          self.frame_count = frame_count          #CAANTIDAD DE FRAMES DE LA SKIN DEL JUGAODR
          self.width_frame = frame_w
          self.height_frame = frame_h   #esto siempre es estatico. como las spritesheets son horizontales entonces esto que qeuda asi . 
          self.scale = scale                              #multiplicador de escala para el sprite
          self.colour = colour                  #color de fondo del sprite que se va a eliminar
          self.last_update = t.time()     #tiempo de la ultima actualizacion del frame
          self.current_frame = 0        #numero de frame que esta actualmente dibujandose.
          self.current_skin = self.current_spritesheet.get_image(0, 48, 48, self.scale, self.colour)
          self.mask= pg.mask.from_surface(self.current_skin)
          self.bomba_animacion = explosion

     def animate(self):
       if self.bomba_animacion:
          self.animacion_skin()
          if self.current_frame == 4:
               self.bomba_animacion = False
               E_1.bomba_animacion = True
          self.screen.blit(self.current_skin, (self.x, self.y))


     def auto_animate(self):
                    self.animate()

     def cambiar_spritesheet(self, nuevo_spritesheet): #esto es para cambiar la spritesheet del jugador, por ejemplo cuando se ejecuta una habilidad
        self.current_spritesheet = nuevo_spritesheet #cambia el spritesheet actual al nuevo
        self.current_frame = 0  #reinicia el frame actual a 0
        self.last_update = t.time()     #reinicia el tiempo de la ultima actualizacion para que no se salte frames al cambiar de spritesheet
    
     def animacion_skin(self) : 
        current_time = t.time()
        if current_time - self.last_update > 0.4 : # Cambio de frame cada 0.2 segundos
            self.last_update = current_time
            self.current_frame = ((self.current_frame + 1) % self.frame_count)          #El digamos asi "numero" de frame que esta actualmente dibujandose. 
        self.current_skin = self.current_spritesheet.get_image( self.current_frame, self.width_frame,  self.height_frame, self.scale, self.colour)
        self.mask = pg.mask.from_surface(self.current_skin)
    
     def colisiona_con(self, otro_objeto):
        # Calcular diferencia de posiciones (offset)
        offset_x = int(otro_objeto.x) - int(self.x)
        offset_y = int(otro_objeto.y) - int(self.y)
        return self.mask.overlap(otro_objeto.mask, (offset_x, offset_y)) is not None

class Bomba_Matriz(Bomba):
     def __init__(self, screen, x, y, spritesheet_bomba, frame_count, frame_w, frame_h, scale, colour, explosion):
          super().__init__(screen, x, y, spritesheet_bomba, frame_count, frame_w, frame_h, scale, colour, explosion)

     def animate_matriz(self):
       if self.bomba_animacion:
          self.animacion_skin()
          if self.current_frame == 4:
               matriz[int(self.y//48)][int(self.x//48)] = 9
               lista_B.remove(self)
          self.screen.blit(self.current_skin, (self.x, self.y))

     def auto_animate(self):
                    self.animate_matriz()

class Explosion:
     def __init__(self, screen, x, y, spritesheet_exp, frame_count, frame_w,frame_h, scale, colour, explosion):
          self.screen = screen
          self.x = x
          self.y = y
          self.current_spritesheet = spritesheet_exp
          self.frame_count = frame_count          #CAANTIDAD DE FRAMES DE LA SKIN DEL spritesheet
          self.width_frame = frame_w
          self.height_frame = frame_h   #esto siempre es estatico. como las spritesheets son horizontales entonces esto que qeuda asi . 
          self.scale = scale                              #multiplicador de escala para el sprite
          self.colour = colour                  #color de fondo del sprite que se va a eliminar
          self.last_update = t.time()     #tiempo de la ultima actualizacion del frame
          self.current_frame = 0        #numero de frame que esta actualmente dibujandose.
          self.current_skin = self.current_spritesheet.get_image(0, 48, 48, self.scale, self.colour)
          self.mask= pg.mask.from_surface(self.current_skin)
          self.bomba_animacion = explosion

     def animate(self):
       if self.bomba_animacion:
          self.animacion_skin()
          if self.current_frame == 3:
               E_1.bomba_animacion = False
          self.screen.blit(self.current_skin, (self.x, self.y))


     def auto_animate(self):
                    self.animate()

     def cambiar_spritesheet(self, nuevo_spritesheet): #esto es para cambiar la spritesheet del jugador, por ejemplo cuando se ejecuta una habilidad
        self.current_spritesheet = nuevo_spritesheet #cambia el spritesheet actual al nuevo
        self.current_frame = 0  #reinicia el frame actual a 0
        self.last_update = t.time()     #reinicia el tiempo de la ultima actualizacion para que no se salte frames al cambiar de spritesheet
    
     def animacion_skin(self) : 
        current_time = t.time()
        if current_time - self.last_update > 0.1 : # Cambio de frame cada 0.2 segundos
            self.last_update = current_time
            self.current_frame = ((self.current_frame + 1) % self.frame_count)          #El digamos asi "numero" de frame que esta actualmente dibujandose. 
        self.current_skin = self.current_spritesheet.get_image( self.current_frame, self.width_frame,  self.height_frame, self.scale, self.colour)
        self.mask = pg.mask.from_surface(self.current_skin)
    
     def colisiona_con(self, otro_objeto):
        # Calcular diferencia de posiciones (offset)
        offset_x = int(otro_objeto.x) - int(self.x)
        offset_y = int(otro_objeto.y) - int(self.y)
        return self.mask.overlap(otro_objeto.mask, (offset_x, offset_y)) is not None
     
class Explosion_Matriz(Explosion):
     def __init__(self, screen, x, y, spritesheet_exp, frame_count, frame_w, frame_h, scale, colour, explosion):
          super().__init__(screen, x, y, spritesheet_exp, frame_count, frame_w, frame_h, scale, colour, explosion)
          self.matriz = matriz
          # Flags por dirección: False hasta que marque el primer '*'
          self.star_up = False
          self.star_down = False
          self.star_right = False
          self.star_left = False

     def animate_matriz(self):
       if self.bomba_animacion:
          self.animacion_skin()
          if self.current_frame == 3:
               lista_E.remove(self)
          self.screen.blit(self.current_skin, (self.x, self.y))
     
     def auto_animate(self):
                    self.animate_matriz()

     
class Explosion_Matriz_Lados(Explosion_Matriz):
     def __init__(self, screen, x, y, spritesheet_exp, frame_count, frame_w, frame_h, scale, colour, explosion, direccion):
          super().__init__(screen, x, y, spritesheet_exp, frame_count, frame_w, frame_h, scale, colour, explosion)
          self.dir = direccion

     def animate_matriz(self):
       if self.bomba_animacion:
          self.animacion_skin()
          if self.dir == 'u':
               self.current_skin = pg.transform.rotate(self.current_skin, 90)
               self.current_skin.set_colorkey('black')
          if self.dir == 'd':
               self.current_skin = pg.transform.rotate(self.current_skin, 270)
               self.current_skin.set_colorkey('black')
          if self.dir == 'a':
               self.current_skin = pg.transform.flip(self.current_skin, False, False)
               self.current_skin.set_colorkey('black')

          if self.dir == 's':
               self.current_skin = pg.transform.rotate(self.current_skin, 90)
               self.current_skin.set_colorkey('black')
          if self.dir == 'w':
               self.current_skin = pg.transform.rotate(self.current_skin, 270)
               self.current_skin.set_colorkey('black')

          if self.dir == 'f':
               self.current_skin = pg.transform.flip(self.current_skin, True, False)
               self.current_skin.set_colorkey('black')

          if self.current_frame == 3:
              lista_EL.remove(self)
          self.screen.blit(self.current_skin, (self.x, self.y))

     def animacion_skin(self) : 
        current_time = t.time()
        if current_time - self.last_update > 0.1 : # Cambio de frame cada 0.2 segundos
            self.last_update = current_time
            self.current_frame = ((self.current_frame + 1) % self.frame_count)          #El digamos asi "numero" de frame que esta actualmente dibujandose. 
        self.current_skin = self.current_spritesheet.get_image( self.current_frame, self.width_frame,  self.height_frame, self.scale, self.colour)
        self.mask = pg.mask.from_surface(self.current_skin)

     def auto_animate(self):
                    self.animate_matriz()


#-----------------------pygame------------------------------

#commons de pygame (literalmente el inicio de pygame)
pg.init()
screen= pg.display.set_mode((816, 624)) #tamano de pantalla
pg.display.set_caption("El hombre que tiraba bombas") #Nombre de la ventana
tiempo_juego= Reloj(300)
reloj = pg.time.Clock() #reloj comun para controlar FPS

RUTA_PLAYS= "games\player_data\plays.json"

#*!-----------------------GLOBALES------------------------------
estado = "menu" #se inicializa el estado del juego como "start", que representa el menu de inicio (ahorita esta en seleccion de pers por unas pruebas q taba haciendo)
estado_anterior=""
#Globales Steadman
obstacles = [] #lista de colisiones con obstaculos
obstacles_R = [] #lista de los rompibles
nivel = 1 #nivel inicial
matriz = [] #la matriz extraida del nivel inicial
Lista_Enemigos_1 = [] #la lista de los enemigos, esta solo posee los enemigos del nivel 1 o los mas sencillos
Fuerza_exp = 4 #Esto dice la fuerza de la explosion, se va a expandir en casillas en forma de cruz, si es 1 es una casilla extra
lista_B = [] #lista de bombas, solo para multiples animaciones a la vez
lista_E = [] #lista de explosiones, solo para multiples 
lista_EL = [] #lista para las explosiones extra o de lado o de borde
bomba_in_bounds = False
#___________________Enemigos y Aparicion de obstaculos________________________
CELL_SIZE = 48 #tamaño por celda para la aparicion de todo XDXDXDXDX
W_GRID = 17 #debido a que no es un cuadrado se debe definir un tamaño por ancho y alto
H_GRID = 13

primera_vez = True #debido a que ciertas cosas SOLO se deben generar una vez por nivel, como ver sus posiciones, se hace este booleano

#-----------------------GLOBALES Y CARACTERISTICAS DEL JUEGO------------------------------
puntaje_nivel=0
puntaje_final=0
global_fade=False
global_cuadrado=False
bara_texto =""
nombre_jugador=""
jugadas =[]
#-------------area de juego-----------
game_surface = pg.Surface((816,528)) #*! ya cambie el tamano del frame enves de 624 a 524, estaba pintando el frame 100 pix hacia abajo y hacia que pete todo

#------------------------TEXTURAS------------------------------
heart_texture = pg.image.load("assets/textures/heart.png").convert_alpha() #carga la textura del corazon
#--------------------FONDOS-----------------------------------
pos_par_men= [0] * 7
fondo_p_men=[ pg.image.load("assets\Backgrounds\opciones\layer5.png").convert_alpha() ,pg.image.load("assets\Backgrounds\opciones\layer4.png").convert_alpha() ,pg.image.load("assets\Backgrounds\opciones\layer3.png").convert_alpha() ,pg.image.load("assets\Backgrounds\opciones\layer2.png").convert_alpha() ,pg.image.load("assets\Backgrounds\opciones\layer1.png").convert_alpha() ,pg.image.load("assets\Backgrounds\opciones\layer0.png").convert_alpha() ]
fondos_p_op = [pg.image.load("assets/backgrounds/menu/layer3.png"),pg.image.load("assets/backgrounds/menu/layer2.png"),pg.image.load("assets/backgrounds/menu/layer1.png"),pg.image.load("assets/backgrounds/menu/layer0.png")]
#------------------------SPRITES DE JUGADORES------------------------------
sps_habilidades= pg.image.load ("assets\Textures\habilities.png").convert_alpha()
sps_items = pg.image.load("assets\Textures\items.png").convert_alpha()
sps_powerups=pg.image.load("assets\Textures\powerups.png").convert_alpha()

#--- Intangible ----
preview_intangible = pg.image.load("assets\sprites\players\Intangible\preview.png").convert_alpha() 
imp_sps_intangible_idle= pg.image.load("assets\sprites\players\Intangible\idle.png").convert_alpha() #placeholder para el sprite intangible
imp_sps_intalgible_hab= pg.image.load("assets\sprites\players\Intangible\especial.png").convert_alpha() #placeholder para el sprite intangible de habilidad
imp_sps_intangible_walk= pg.image.load("assets\sprites\players\Intangible\walk.png").convert_alpha() #placeholder para el sprite intangible de correr
imp_sps_intangible_death=pg.image.load("assets\sprites\players\Intangible\death.png").convert_alpha() #placeholder para el sprite intangible de correr
#----tactico----
preview_tactico = pg.image.load("assets\sprites\players\Tactico\preview.png").convert_alpha() 
imp_sps_tac_idle= pg.image.load("assets\sprites\players\Tactico\idle.png").convert_alpha() #placeholder para el sprite intangible
imp_sps_tac_hab= pg.image.load("assets\sprites\players\Tactico\especial.png").convert_alpha() #placeholder para el sprite intangible de habilidad
imp_sps_tac_walk= pg.image.load("assets\sprites\players\Tactico\walk.png").convert_alpha() #placeholder para el sprite intangible de correr
imp_sps_tac_death=pg.image.load("assets\sprites\players\Tactico\Death.png").convert_alpha() #placeholder para el sprite intangible de correr

#---kamikaze---
preview_kamikaze = pg.image.load("assets\sprites\players\Kamikaze\preview.png").convert_alpha() 
imp_sps_kam_idle= pg.image.load("assets\sprites\players\Kamikaze\idle.png").convert_alpha() #placeholder para el sprite intangible
imp_sps_kam_hab= pg.image.load("assets\sprites\players\Kamikaze\especial.png").convert_alpha() #placeholder para el sprite intangible de habilidad
imp_sps_kam_walk= pg.image.load("assets\sprites\players\Kamikaze\walk.png").convert_alpha() #placeholder para el sprite intangible de correr
imp_sps_kam_death=pg.image.load("assets\sprites\players\Kamikaze\death.png").convert_alpha() #placeholder para el sprite intangible de correr



#-----------------------SPRITESHEET DE JUGADORES ------------------------------
spritesheet_habilidades_prev= SpriteSheet (sps_habilidades)
spritecheet_items= SpriteSheet (sps_items)
spritesheet_powerups=SpriteSheet(sps_powerups)

#Invencible 
spritesheet_idle_int = SpriteSheet(imp_sps_intangible_idle) #crea una instancia de la clase SpriteSheet con el sprite del jugador
spritesheet_habilidad_int = SpriteSheet(imp_sps_intalgible_hab) #crea una instancia de la clase SpriteSheet con el sprite de habilidad del jugador
spritesheet_walk_int = SpriteSheet(imp_sps_intangible_walk) #crea una instancia de la clase SpriteSheet con el sprite de correr del jugador
spritesheet_death_int = SpriteSheet(imp_sps_intangible_death) #crea una instancia de la clase SpriteSheet con el sprite de correr del jugador

#tactico
spritesheet_idle_tac = SpriteSheet(imp_sps_tac_idle) #crea una instancia de la clase SpriteSheet con el sprite del jugador
spritesheet_habilidad_tac = SpriteSheet(imp_sps_tac_hab) #crea una instancia de la clase SpriteSheet con el sprite de habilidad del jugador
spritesheet_walk_tac = SpriteSheet(imp_sps_tac_walk) #crea una instancia de la clase SpriteSheet con el sprite de correr del jugador
spritesheet_death_tac = SpriteSheet(imp_sps_tac_death) #crea una instancia de la clase SpriteSheet con el sprite de correr del jugador
#kamikaze
spritesheet_idle_kam= SpriteSheet(imp_sps_kam_idle) #crea una instancia de la clase SpriteSheet con el sprite del jugador
spritesheet_habilidad_kam = SpriteSheet(imp_sps_kam_hab) #crea una instancia de la clase SpriteSheet con el sprite de habilidad del jugador
spritesheet_walk_kam = SpriteSheet(imp_sps_kam_walk) #crea una instancia de la clase SpriteSheet con el sprite de correr del jugador
spritesheet_death_kam = SpriteSheet(imp_sps_kam_death) #crea una instancia de la clase SpriteSheet con el sprite de correr del jugador


Player_1 = None
#ds
font_tit= pg.font.Font("fonts\\Upheavt.ttf",60)
font_tit1= pg.font.Font("fonts\\Upheavt.ttf",50)

#fonts pixeltype
font = pg.font.Font("fonts/Pixeltype.ttf", 35) #fuente para mostrar info de cada skin del player
font0= pg.font.Font("fonts/Pixeltype.ttf", 30) #fuente para mostrar info de cada skin del player
font1= pg.font.Font("fonts/Pixeltype.ttf", 50) #fuente para mostrar titulo de cada skin de player   
skin_seleccionada = 0                   #variable global para controlar la skin que selecciona en la aprte de seleccion de jugador (skin)
skin_viendo=0


##BOTONES GLOBALES 
boton_back= Boton (740,594,70,30,"Atras", "fonts/Pixeltype.ttf", 28,(133, 146, 158) ,(153, 163, 164))
boton_siguiente_opcion= Boton(300, 500, 150, 30, "Siguiente", "fonts/Pixeltype.ttf", 28, (44, 62, 80), (52, 73, 94 )) #"crea un boton de siguiente opcion (tiene que estar afuera por tipo int)
boton_seleccionar = Boton(300, 540, 150, 30, "Seleccionar", "fonts/Pixeltype.ttf", 28, (44, 62, 80), (52, 73, 94 ) ) #crea un boton de seleccionar
Boton_ingresar = Boton (320,320,150,30,"Empezar", "fonts/Pixeltype.ttf", 28,(133, 146, 158) ,(153, 163, 164))
Boton_mejores_p = Boton (320,360,150,30,"Ver Puntajes", "fonts/Pixeltype.ttf", 28,(133, 146, 158) ,(153, 163, 164))
Boton_opciones = Boton (320,400,150,30,"Opciones", "fonts/Pixeltype.ttf", 28,(133, 146, 158) ,(153, 163, 164))
prev_siguiente = False #variable para controlar si se ha hecho clic en el botón de siguiente opción
prev_seleccion = False  #variable para controlar si se ha hecho clic en el botón de seleccionar
prev_ing=False
prev_mejor_p=False
prev_opc=False
prev_atras=False

#----------------------MUSICA--------------------
musica_menu=pg.mixer.Sound("sounds\music\Main_menu.mp3")
musica_puntajes=pg.mixer.Sound("sounds\music\puntajes.mp3")
#-----------------------SPRITES------------------------------
#Obstaculos
sps_obstacles = pg.image.load("assets\Textures\Bricks.png")
spritesheet_Obstaculos = SpriteSheet(sps_obstacles)
Obstaculo_I = spritesheet_Obstaculos.get_image(1,64,64,0.75,'white')
Obstaculo_R = spritesheet_Obstaculos.get_image(4,64,64,0.75,'white')

#Floor
sps_floor = pg.image.load("assets\Textures\Floor.png")
spritesheet_Floor = SpriteSheet(sps_floor)
Floor_corner0 = spritesheet_Floor.get_image(0,64,64,0.75,'white')
Floor_corner1 = pg.transform.rotate(Floor_corner0,90)
Floor_corner2 = pg.transform.rotate(Floor_corner0,180)
Floor_corner3 = pg.transform.rotate(Floor_corner1,180)
Floor_up = spritesheet_Floor.get_image(1,64,64,0.75,'white')
Floor_down = pg.transform.rotate(Floor_up,180)
Floor_lside = spritesheet_Floor.get_image(3,64,64,0.75,'white')
Floor_rside = pg.transform.rotate(Floor_lside,180)
Floor_nothing = spritesheet_Floor.get_image(4,64,64,0.75,'white')

#Enemigos
sps_perro_cañon = pg.image.load("assets\sprites\enemies\perro_canon\Walk.png")
spritesheet_perro_cañon = SpriteSheet(sps_perro_cañon)
#Perro cañon muerte
sps_perro_muerte = pg.image.load("assets\sprites\enemies\perro_canon\Death.png")
spritesheet_perro_muerte = SpriteSheet(sps_perro_muerte)
#Bomba
sps_bomba = pg.image.load("assets\Textures\Bomba\Bomba.png")
spritesheet_Bomba = SpriteSheet(sps_bomba)

#Explosion_Centro:
sps_exp_centro = pg.image.load("assets\Textures\Bomba\explosion_c.png")
spritesheet_exp_c = SpriteSheet(sps_exp_centro)

#Explosion Borde:
sps_exp_borde = pg.image.load("assets\Textures\Bomba\explosion_b.png")
spritesheet_exp_b = SpriteSheet(sps_exp_borde)
#Explosion Lado:
sps_exp_lado = pg.image.load("assets\Textures\Bomba\explosion_l.png")
spritesheet_exp_l = SpriteSheet(sps_exp_lado)
#--------------------------------------------------------FUNCIONES GET PLAYS---------------------------
def cargar_partidas() : 
     global RUTA_PLAYS 
     try :
          with open(RUTA_PLAYS, 'r', encoding='utf-8') as f:
               return json.load(f)
     except FileNotFoundError:
        return {"partidas": []}

def guardar_partida(data) : 
     global RUTA_PLAYS 
     with open(RUTA_PLAYS, 'w', encoding='utf-8') as f : 
          json.dump(data, f, indent=2, ensure_ascii=False)

def nueva_partida( usuario, puntaje, personaje, nivel):
    global RUTA_PLAYS
    data = cargar_partidas(RUTA_PLAYS)
    partida = {
        "usuario": usuario,
        "puntaje": puntaje,
        "personaje": personaje,
        "nivel": nivel,
    }
    data["partidas"].append(partida)
    guardar_partida(data)

def get_partidas () :
    global jugadas
    data = cargar_partidas()
    for partida in data["partidas"]:
        usuario  = partida["usuario"]
        puntaje  = partida["puntaje"]
        nivel    = partida["nivel"]
        personaje= partida["personaje"]
        jugadas.append([f"{usuario:10s} | Puntaje: {puntaje:5d} | Nivel: {nivel:d} | Personaje: {personaje}"])

def dibujar_scoreboard(screen, partidas, font, x=50, y=50, line_height=35):
    for idx, p in enumerate(partidas):
        # Extraer campos con respaldo por si falta algo
        usuario   = str(p.get("usuario", "Desconocido"))
        puntaje   = int(p.get("puntaje", 0))
        nivel     = int(p.get("nivel", 0))
        personaje = str(p.get("personaje", "???"))

        linea = f"{idx+1}. {usuario:<12}  Puntaje: {puntaje:<5}  Nivel: {nivel:<2}  Personaje: {personaje}"
        texto = font.render(linea, True, (255, 255, 255))
        screen.blit(texto, (x, y + idx * line_height))
#------------------------------------------------------FUNCIONES SECUNDARIAS PARA NIVEL---------------------------------------- 
#Funcion que ha partir de la matriz lee las posiciones iniciales 
def save_positions(screen):
        global obstacles, matriz, Lista_Enemigos_1, obstacles_R
        for fil in range(len(matriz)):
             for col in range(len(matriz[fil])):
                  if matriz[fil][col] == '#': 
                       texture = Obstaculo_I
                       obs = Obstaculo(screen, (col*48),(fil*48) , texture)
                       obstacles += [obs]
                       
                  if matriz[fil][col] == '*':
                       texture = Obstaculo_R
                       obs = Obstaculo(screen, (col*48),(fil*48) , texture)
                       obstacles += [obs]
                       obstacles_R += [obs]

                  if matriz[fil][col] == 1:
                       Enemigo_perro = Enemigos(screen, (col*48), (fil*48), 1.1, spritesheet_perro_cañon, spritesheet_perro_muerte, 3, 48, 48, 1, 'black', False, random.randint(0,3))
                       Lista_Enemigos_1 += [Enemigo_perro]

#Este genera las texturas inamovibles, los enemigos se dibujan y se tratan dentro de su propia clase
def generate(screen):
        global obstacles, matriz
        for fil in range(len(matriz)):
             for col in range(len(matriz[fil])):
                  if matriz[fil][col] == '#': 
                       texture = Obstaculo_I
                       obs = Obstaculo(screen, (col*48),(fil*48) , texture)
                       
                       obs.draw()
                  if matriz[fil][col] == '*':
                       texture = Obstaculo_R
                       obs = Obstaculo(screen, (col*48),(fil*48) , texture)
                       obs.draw()
     
                  if matriz[fil][col] in (0,1,8,9,'u','d','l','r','w','a','s','f','c'):
                       if fil == 0 and col == 0:
                            texture = Floor_corner0
                            obs = Obstaculo(screen, (col*48),(fil*48) , texture)
                            obs.draw()
                       elif fil == 0 and col == 16:
                            texture = Floor_corner3
                            obs = Obstaculo(screen, (col*48),(fil*48) , texture)
                            obs.draw()
                       
                       elif fil == 10 and col == 16:
                            texture = Floor_corner2
                            obs = Obstaculo(screen, (col*48),(fil*48) , texture)
                            obs.draw()
                        
                       elif fil == 10 and col == 0:
                            texture = Floor_corner1
                            obs = Obstaculo(screen, (col*48),(fil*48) , texture)
                            obs.draw()

                       elif fil == 0:
                            texture = Floor_up
                            obs = Obstaculo(screen, (col*48),(fil*48) , texture)
                            obs.draw()

                       elif col == 0:
                            texture = Floor_lside
                            obs = Obstaculo(screen, (col*48),(fil*48) , texture)
                            obs.draw()
                        
                       elif col == 16: 
                            texture = Floor_rside
                            obs = Obstaculo(screen, (col*48),(fil*48) , texture)
                            obs.draw()

                       elif fil == 10:
                            texture = Floor_down
                            obs = Obstaculo(screen, (col*48),(fil*48) , texture)
                            obs.draw()
                        
                       else:
                            texture = Floor_nothing
                            obs = Obstaculo(screen, (col*48),(fil*48) , texture)
                            obs.draw()
#funciones para la generacion y manejo de bombas
def bombastic_pos (screen): #guarda posicion de manejo de bombas 
     global lista_B, lista_E, bomba_in_bounds, lista_EL
     for fil in range(len(matriz)):
             for col in range(len(matriz[fil])):
                  if matriz[fil][col] == 8:
                       Bomba_R = Bomba_Matriz(screen, (col*48), (fil*48), spritesheet_Bomba, 5, 64, 64, 0.75, 'black',True)
                       lista_B += [Bomba_R]
                       matriz[fil][col] = 0
                  if matriz[fil][col] == 9:
                       Exp_R = Explosion_Matriz(screen, (col*48), (fil*48), spritesheet_exp_c, 5, 64, 64, 0.75, 'black',True)
                       lista_E += [Exp_R]
                       matriz[fil][col] = 0

                  if matriz[fil][col] in ('u','l','d','r'):
                       EXP_RL = Explosion_Matriz_Lados(screen, (col*48), (fil*48), spritesheet_exp_l, 5, 64, 64, 0.75, 'black',True,matriz[fil][col])
                       lista_EL += [EXP_RL]
                       

                  if matriz[fil][col] in ('w','a','s','f'):
                       EXP_RL = Explosion_Matriz_Lados(screen, (col*48), (fil*48), spritesheet_exp_b, 5, 64, 64, 0.75, 'black',True,matriz[fil][col])
                       lista_EL += [EXP_RL]

                  if matriz[fil][col] == 'c':
                       EXP_RL = Explosion_Matriz_Lados(screen, (col*48), (fil*48), spritesheet_exp_c, 5, 64, 64, 0.75, 'black',True,matriz[fil][col])
                       lista_EL += [EXP_RL]              
     if lista_B == []:
          bomba_in_bounds = False

def limpiar():
     global matriz
     for fil in range(len(matriz)):
             for col in range(len(matriz[fil])):
                       if matriz[fil][col] in ('u','l','d','r','w','a','s','f','c'):
                            matriz[fil][col] = 0
                       
def bombastic_hitbox ():
     global star_up, star_right, star_left, star_down,puntaje_nivel
     for bomba in lista_B:
          bomba.auto_animate()
     for exp in lista_E:
          exp.auto_animate()
          for obsR in obstacles_R:
               if Explosion_Matriz.colisiona_con(exp, obsR):
                   matriz[int(obsR.y/48)][int(obsR.x/48)] = 0
                   obstacles_R.remove(obsR)
                   obstacles.remove(obsR)
          for enemies in Lista_Enemigos_1:
              if Explosion_Matriz.colisiona_con(exp, enemies):
                   puntaje_nivel+=1
                   enemies.animacion_muerte()
          
          
    
          x = exp.x // 48
          y = exp.y // 48
          max_filas = len(matriz)
          max_cols  = len(matriz[0])

          # ARRIBA
          
          for i in range(1, Fuerza_exp + 1):
               if not exp.star_up:
                    yi, xi = y - i, x
                    if not (0 <= yi < max_filas):
                         yi0 = y - (i - 1)
                         if 0 <= yi0 < max_filas:
                              if  yi0 != y:
                                   matriz[yi0][xi] = 'w'
                              else:
                                   matriz[yi0][xi] = 'c'
                         break

                    celda = matriz[yi][xi]
                    if celda == '*':
                         matriz[yi][xi] = 'u'
                         exp.star_up = True
                         
                         break
                    if celda in ('#', 9, 8):
                         break
                    matriz[yi][xi] = 'w' if i == Fuerza_exp else 'u'
               

          # ABAJO
          for i in range(1, Fuerza_exp + 1):
               if not exp.star_down:
                    yi, xi = y + i, x
                    if not (0 <= yi < max_filas):
                         yi0 = y + (i - 1)
                         if 0 <= yi0 < max_filas:
                              if yi0 != y:
                                   matriz[yi0][xi] = 's'
                              else:
                                   matriz[yi0][xi] = 'c'
                         break

                    celda = matriz[yi][xi]
                    if celda == '*':
                         matriz[yi][xi] = 'd'
                         exp.star_down = True
                         break
                    if celda in ('#', 9, 8):
                         break
                    matriz[yi][xi] = 's' if i == Fuerza_exp else 'd'

          # DERECHA
          for i in range(1, Fuerza_exp + 1):
               if not exp.star_right:
                    yi, xi = y, x + i
                    if not (0 <= xi < max_cols):
                         xi0 = x + (i - 1)
                         if 0 <= xi0 < max_cols:
                              if xi0 != x:
                                   matriz[yi][xi0] = 'f'
                              else:
                                   
                                   matriz[yi][xi0] = 'c'
                         break

                    celda = matriz[yi][xi]
                    if celda == '*':
                         matriz[yi][xi] = 'r'
                         exp.star_right = True
                         break
                    if celda in ('#', 9, 8):
                         break
                    matriz[yi][xi] = 'f' if i == Fuerza_exp else 'r'

          # IZQUIERDA
          for i in range(1, Fuerza_exp + 1):
               if not exp.star_left:
                    yi, xi = y, x - i
                    if not (0 <= xi < max_cols):
                         xi0 = x - (i - 1)
                         if 0 <= xi0 < max_cols:
                              if xi0 != x:
                                   matriz[yi][xi0] = 'a'
                              else:
                                   matriz[yi][xi0] = 'c'
                         break

                    celda = matriz[yi][xi]
                    if celda == '*':
                         matriz[yi][xi] = 'l'
                         exp.star_left = True
                         break
                    if celda in ('#', 9, 8):
                         break
                    matriz[yi][xi] = 'a' if i == Fuerza_exp else 'l'

     for exp_l in lista_EL:
          exp_l.auto_animate()
          matriz[exp_l.y//48][exp_l.x//48] = 0
          for obsR in obstacles_R:
               if Explosion_Matriz_Lados.colisiona_con(exp_l, obsR):
                   matriz[int(obsR.y/48)][int(obsR.x/48)] = 0
                   obstacles_R.remove(obsR)
                   obstacles.remove(obsR)
          for enemies in Lista_Enemigos_1:
              if Explosion_Matriz_Lados.colisiona_con(exp_l, enemies):
                   puntaje_nivel+=1
                   enemies.animacion_muerte()
          limpiar()          
#Funcion para leer la matriz de nivel
def leer_archivo(path):
        archivo = open(path, 'r')
        contenido = archivo.read()
        archivo.close()
        return contenido
def init (nivel):
        global matriz
        texto_nivel = f"Nivel_{nivel}.txt"
        matriz = eval(leer_archivo(texto_nivel))
init(nivel)
Enemigo_perro = Enemigos(screen, (0), (0), 1.1, spritesheet_perro_cañon, spritesheet_perro_muerte, 3, 48, 48, 0, 'black', False, random.randint(0,3)) #enemigo fantasma para q no explote todo xd
Lista_Enemigos_1 += [Enemigo_perro]
B_1 = Bomba(game_surface, 0, 0, spritesheet_Bomba, 5, 64, 64, 0.75, 'black',False) #Para la habilidad del tactico
E_1 = Explosion(game_surface, 0, 0, spritesheet_exp_c, 5, 64, 64, 0.75, 'black',False) #Para la habilidad del tactico

#!---------------------------------------------EFECTOS ESPECIALES :o --------------------------------
def bg_men_parallax(): 
    global fondo_p_men, pos_par_men
    parallax_speeds = [0.05, 0.001, 0.1, 0.15, 0.2, 0.5 ]
    
    # Dibujar capas desde la más lejana (0) a la más cercana (6)
    for i in range (len (fondo_p_men)) :
        # Calcular nueva posición (movimiento infinito)
        pos_par_men[i] -= parallax_speeds[i]
        img= pg.transform.scale (fondo_p_men[i],(fondo_p_men[i].get_width()*0.25,fondo_p_men[i].get_height()*0.25) if 0<i<5  else((fondo_p_men[i].get_width()*0.55,fondo_p_men[i].get_height()*0.55) ))
        
        # Reiniciar posición cuando la imagen sale completamente de la pantalla
        if pos_par_men[i] <= -img.get_width():
            pos_par_men[i] = 0
        
        # Dibujar dos copias para el efecto de scroll infinito
        screen.blit(img, (pos_par_men[i], (0 )))
        screen.blit(img, (pos_par_men[i] + img.get_width(), 0))
def bg_opc_parallax():
    global fondos_p_op
    factores = [0.1, 0.3, 0.5, 0.7]

    mouse_pos = pg.mouse.get_pos()   
    """Dibuja el fondo con efecto parallax basado en la posición del mouse"""
    mouse_x, mouse_y = mouse_pos
    
    # Calcular desplazamiento relativo al centro
    rel_x = (mouse_x - 816 // 2) / (816 // 2)
    rel_y = (mouse_y - 624 // 2) / (624 // 2)
    
    # Dibujar capas desde la más lejana (0) a la más cercana (3)
    for i, fondo in enumerate(fondos_p_op):
        # Calcular desplazamiento para esta capa
        fondo=pg.transform.scale(fondo, (1400,780))
        offset_x = rel_x * factores[i] * 100
        offset_y = rel_y * factores[i] * 100
        
        # Posición de dibujo (centrada con offset)
        pos_x = (816 - fondo.get_width()) // 2 + offset_x
        pos_y = (624 - fondo.get_height()) // 2 + offset_y
        
        screen.blit(fondo, (pos_x, pos_y))
    
def fade_in_from_white(duration_ms=1000):
    # Capturar la escena actual como fondo estático
    background = screen.copy()
    
    overlay = pg.Surface(screen.get_size(), pg.SRCALPHA)
    overlay.fill((255, 255, 255))
    start_time = pg.time.get_ticks()
    clock = pg.time.Clock()
    
    running = True
    while running:
        screen.blit(background ,(0,0))
        elapsed = pg.time.get_ticks() - start_time
        progress = min(1, elapsed / duration_ms)
        
        if progress >= 1:
            alpha = 0
            running = False
        else :
            alpha = 255-int(255 * progress)
            print (alpha)
        
        overlay.set_alpha(alpha)
        screen.blit(overlay, (0, 0))
        pg.display.flip()
        
        # Manejo de eventos sin bloquear
        for evt in pg.event.get():
            if evt.type == pg.QUIT:
                pg.quit()
                sys.exit()
        
        clock.tick(60)

def animar_cuadro(screen,
                  target_size=(716, 524),
                  speed=20,
                  alpha=100,
                  reset=False):
    global global_cuadrado

    # Reinicia la animación si hace falta
    if reset or not hasattr(animar_cuadro, "size"):
        animar_cuadro.size = [0, 0]
        global_cuadrado = False

    # Obtén el tamaño actual
    w, h = animar_cuadro.size
    tw, th = target_size

    # Actualiza anchura y altura
    if w < tw:
        w = min(w + speed, tw)
    if h < th:
        h = min(h + speed, th)

    # Guarda el nuevo tamaño
    animar_cuadro.size = [w, h]

    # Cuando llegue al tope, activa la flag
    #if w == tw and h == th :
     #   global_cuadrado = True

    # Crea la superficie blanca semitransparente
    surf = pg.Surface((w, h), pg.SRCALPHA)
    surf.fill((24,24,24, alpha))

    # Centra y dibuja
    sw, sh = screen.get_size()
    x = (sw - w) // 2
    y = (sh - h) // 2
    screen.blit(surf, (x, y))
#!------------------------------------------------PANTALLAS-------------------------------------------------
def pantalla_titulo () :
     global global_fade, bara_texto, estado,prev_ing,prev_ing,prev_opc,prev_mejor_p
     bg_men_parallax()
     titulo1= font_tit.render("EL HOMBRE", False, "white")
     titulo2= font_tit.render("Que tiraba bombas", False, "white")
     titulo3 =font0.render("Proyecto 2 , IC-1802 - Tecnologico de Costa Rica", False,"gray")
     credit=font0.render("Steadman Murillo - Benjamin Ortiz  2025", False, "white")
     screen.blit (titulo1,(250,50))
     screen.blit(titulo2,(120,90))
     
     if not global_fade :
          fade_in_from_white() 
          global_fade=True
     #dibujo botones 
     click_empezar=Boton_ingresar.check_click()
     click_puntajes=Boton_mejores_p.check_click()
     click_opc=Boton_opciones.check_click()
     if click_empezar and not prev_ing :
          estado="seleccion_personaje"
     if click_puntajes and not prev_mejor_p :
          animar_cuadro(screen,reset=True)
          estado= "puntajes"
     if click_opc and not prev_opc : 
          animar_cuadro(screen,reset=True)
          estado="opciones"

     Boton_ingresar.draw(screen)
     Boton_mejores_p.draw(screen)
     Boton_opciones.draw(screen)
     screen.blit(credit,(5,605))
     screen.blit(titulo3,(200,150))

def pantalla_opciones() : 
     global global_cuadrado, prev_atras, estado, estado_anterior
     bg_men_parallax()
     if not global_cuadrado : 
          animar_cuadro(screen)
     click_back= boton_back.check_click() 
     if click_back and not prev_atras : 
          estado= "menu"
          global_cuadrado= False
     prev_atras= click_back
     boton_back.draw(screen)

def pantalla_puntajes() : 
     global prev_atras, estado
     bg_opc_parallax() 
     animar_cuadro(screen)

     

     click_atras = boton_back.check_click ()
     if click_atras and not prev_atras : 
          estado= "menu"
     prev_atras= click_atras

     titulo= font_tit1.render("TOP 5 ", False, "white")
     screen.blit(titulo,(340,70))
     boton_back.draw(screen)
     data=cargar_partidas()
     todas= data.get("partidas",[])
     mejores= sorted(todas, key=lambda p: p["puntaje"],reverse=True)
     max_display = min(len(mejores), 5)    #solo top5
     top_cinco = mejores[:max_display]
     dibujar_scoreboard(screen , top_cinco, font, x=100, y=150, line_height=40 )

def dibujar_gui() :
    global tiempo_juego, puntaje_nivel, estado
    screen.fill((24,24,24))
    lista_pw_uso = ["vida","dano"]
    texto_tiempo=font0.render(f"Tiempo : {tiempo_juego.tiempo}", False , "white")
    texto_puntaje_nivel = font0.render(f"Puntaje : {puntaje_nivel}",False,"white")
    if Player_1.vida <= 1 : 
         Player_1.muerto=True

    
    default_pw = spritesheet_powerups.get_image(2, 64, 64, 1, "black")
    default_pw_p = spritesheet_powerups.get_image(2, 64, 64, 0.5, "black")
    if Player_1.muerto and Player_1.current_frame == Player_1.frames_muerte-1 : 
        estado = "menu"

    powerup_sprites = {"vida": [spritesheet_powerups.get_image(0, 64, 64, 1, "black"),spritesheet_powerups.get_image(0, 64, 64, 0.5, "black")],"dano": [spritesheet_powerups.get_image(1, 64, 64, 1, "black"),spritesheet_powerups.get_image(1, 64, 64, 0.5, "black")]}
    pw_uso_1 = default_pw
    pw_uso_2 = default_pw_p
    if len(lista_pw_uso) >= 1:
        nombre1 = lista_pw_uso[0]
        sprites  = powerup_sprites.get(nombre1)
        if sprites:
            pw_uso_1 = sprites[0]
        # Si hay un segundo power‑up, úsalo en la ranura 2
        if len(lista_pw_uso) == 2:
            nombre2 = lista_pw_uso[1]
            sprites2  = powerup_sprites.get(nombre2)
            if sprites2:
                pw_uso_2 = sprites2[1]

    # Ahora dibuja pw_uso_1 y pw_uso_2 donde corresponda en tu GUI
    vida_jugador=Healthbar_Player (73, 15, 110, 20, Player_1.vida, heart_texture,Player_1.cant_vidas,font0)  # Dibuja la barra de salud del jugador
    vida_jugador.draw(screen)  # Dibuja la barra de salud en la superficie del juego
    vida_jugador.draw_atributes(screen)  # Dibuja los atributos de la barra de salud en la superficie del juego
    habilidad_jugador= HealthBar(73, 55, 110, 20, Player_1.barra_habilidad, (129, 133, 137), Player_1.color_habilidad)  # Dibuja la barra de habilidad del jugador
    habilidad_jugador.draw(screen)  # Dibuja la barra de habilidad en la superficie del juego
    icono_habilidad= spritesheet_habilidades_prev.get_image(skin_seleccionada, 128,128,0.5,"black")
    bombas_img=spritecheet_items.get_image(0,64,64,1.5,"black")
    velocidad_img=spritecheet_items.get_image(1,64,64,1.5,"black")
    escudo_img=spritecheet_items.get_image(2,64,64,1.5,"black")
    cant_bombas =Player_1.items.get("bombas")
    cant_velos=Player_1.items.get("velocidad")
    cant_escus=Player_1.items.get("escudo")
    bombas_tex = font0.render(f" x {cant_bombas}", False, "white")
    velo_text = font0.render(f" x {cant_velos}", False, "white")
    escu_text = font0.render(f" x {cant_escus}", False, "white")
    
    screen.blit(icono_habilidad, (7,30))


    screen.blit(pw_uso_1,(510,20))
    screen.blit(pw_uso_2,(550,0))
    
    screen.blit(bombas_img,(570,0))
    screen.blit (bombas_tex,(598,80))

    screen.blit(velocidad_img,(644,0))
    screen.blit (velo_text,(672,80))

    screen.blit(escudo_img,(718,0))
    screen.blit (escu_text,(746,80))

    screen.blit(texto_tiempo,(327,5))
    screen.blit(texto_puntaje_nivel,(332,25))
    #screen.blit(texto_puntaje_nivel, (425,5))

def pantalla_juego() : #ESTRO ES UN PLACEHOLDER PARA LA CLASE DE PANTALLA DE JUEGO  
    global matriz, puntaje_nivel,puntaje_final, estado
    screen.fill("white")        
    
    game_surface.fill("black")  # Llama al método mover del jugador 1 para dibujarlo en la pantallag
    dibujar_gui()      

    if primera_vez:
        save_positions(game_surface)
    
    generate(game_surface)
    bombastic_pos(game_surface)
    bombastic_hitbox()
    

    
    for ene_1 in Lista_Enemigos_1:
        if Player_1.colisiona_con(ene_1) :
             Player_1.vida-=0.2
        ene_1.auto_move()
        #obstaculos funciona con la mascara de los obstaculos, asi pues para hacer colisiones solo ve si hay choque entre mascaras
        for obst in obstacles:
               if Enemigos.colisiona_con(ene_1, obst):
                              # aquí ya chocaron
                              ene_1.rebote()
                    
                  
    
    
    if B_1.bomba_animacion:
         B_1.auto_animate()
    if E_1.bomba_animacion:
         E_1.auto_animate()
         for obsR in obstacles_R:
              puntaje_nivel+=100
              if Explosion.colisiona_con(E_1, obsR):
                   matriz[int(obsR.y/48)][int(obsR.x/48)] = 0
                   obstacles_R.remove(obsR)
                   obstacles.remove(obsR)
                   print (puntaje_nivel)
         for enemies in Lista_Enemigos_1:
              if Explosion.colisiona_con(E_1, enemies):
                   enemies.animacion_muerte()
     
                   
    Player_1.mover(obstacles)
    Player_1.usar_bomba()
    Player_1.ejecutar_habilidad()   
     
    screen.blit(game_surface,(0, 100))  # Dibuja la superficie del juego en la pantalla

def pantalla_seleccion_jugador () : 
    global skin_seleccionada, skin_viendo, Player_1, prev_siguiente, prev_seleccion, estado, Player_1
    screen.fill("black")
    # Obtener el estado ACTUAL de los botones
    nuevo_viendo_actual = boton_siguiente_opcion.check_click()
    nuevo_seleccion_actual = boton_seleccionar.check_click()
    if nuevo_viendo_actual and not prev_siguiente:  # Solo en el flanco de subida
        skin_viendo += 1
    prev_siguiente = nuevo_viendo_actual  # Actualizar estado previo

    #PREVIEW DE JUGADOR 
    if skin_viendo > 2: 
        skin_viendo %=3
    if skin_viendo == 0:
        Titulo_skin= font1.render ("  Intangible", True, (198, 28, 232)) #texto que muestra el nombre de la skin")
         #dibuja el texto en la pantalla
        desc_skin = font0.render("'Es famoso porque nadie lo ve'", True, (255, 255, 255)) #texto que muestra la descripcion de la skin
        desc_skin2 = font0.render("     Habilidad especial: In-Tangible ", True, (69, 229, 222)) #texto que muestra la descripcion de la skin
        desc_skin3= font0.render("      Este mago conoce las artes oscuras.", True, (129, 133, 137))
        desc_skin4= font0.render("Su habilidad especial es que puede atravesar ", True, (129, 133, 137))
        desc_skin5= font0.render("           Paredes y enemigos con facilidad ", True, (129, 133, 137))
        preview= pg.transform.scale(preview_intangible, (200, 200)) #escala el preview del jugador intangible
    elif skin_viendo == 1:
        Titulo_skin= font1.render ("   Kamikaze", True, (248, 147, 18)) #texto que muestra el nombre de la skin")
        desc_skin = font0.render("      ' Un alma por una bomba '", True, (255, 255, 255)) #texto que muestra la descripcion de la skin
        desc_skin2 = font0.render("       Habilidad especial: Sacrifice ", True, (202, 28, 28)) #texto que muestra la descripcion de la skin
        desc_skin3= font0.render("Este comerciante conoce sus negocios.", True, (129, 133, 137))
        desc_skin4= font0.render("      Intercambia con los espiritus almas por ", True, (129, 133, 137))
        desc_skin5= font0.render("                       bombas y viceversa.", True, (129, 133, 137))
        preview = pg.transform.scale(preview_kamikaze, (200, 200)) #escala el preview del jugador kamikaze
    elif skin_viendo == 2:
        Titulo_skin= font1.render ("    Tactico", True, (127,169,7)) #texto que muestra el nombre de la skin")
        desc_skin = font0.render("    '   El hombre que calcula  '", True, (255, 255, 255)) #texto que muestra la descripcion de la skin
        desc_skin2 = font0.render("Habilidad especial: TACTICAL NUKE ", True, (32, 104, 0)) #texto que muestra la descripcion de la skin
        desc_skin3= font0.render("          El famosisimo Beremiz Samir, que ", True, (129, 133, 137))
        desc_skin4= font0.render("tocado por la guerra fue. Su habilidad le permite", True, (129, 133, 137))
        desc_skin5= font0.render("calcular un misil en donde sus enemigos estan ", True, (129, 133, 137))
        preview = pg.transform.scale(preview_tactico, (200, 200))
    #SELECCION DE JUGADOR 
    if nuevo_seleccion_actual and not prev_seleccion:  # Solo en el flanco de subida
        skin_seleccionada = prev_seleccion
        skin_seleccionada = skin_viendo
        if skin_seleccionada == 0 : 
            Player_1= Jugador_1(game_surface,0,0,4,spritesheet_idle_int,spritesheet_walk_int,spritesheet_habilidad_int,spritesheet_death_int,9,8,8,8,32,32,1.5,"black","Invencible",6,(3, 240, 252),"yellow") #GENERAR PLAYER INVENCIBLE
        elif skin_seleccionada == 1 : 
            Player_1= Jugador_1(game_surface,0,0,4,spritesheet_idle_kam,spritesheet_walk_kam ,spritesheet_habilidad_kam,spritesheet_death_kam,4,7,12,8,48,32,1.35,"black","Kamikaze",6,(3, 240, 252),"yellow") #GENERAR PLAYER INVENCIBLE
        elif skin_seleccionada == 2 :
            Player_1= Jugador_1(game_surface,0,0,1.5,spritesheet_idle_tac,spritesheet_walk_tac ,spritesheet_habilidad_tac,spritesheet_death_tac,4,6,9,6,96,96,0.5,"black","Tactico",6,(3, 240, 252),"yellow")   #GENERAR PLAYER TACTICO
        estado ="juego" #SIEMPRE BAMCIAR EL ESTADO AML SIGUIENTE ANTES DE JUEGO O NO SE 
    prev_seleccion = nuevo_seleccion_actual  # Actualizar estado previo 
 
    screen.blit(Titulo_skin, (300, 50))
    screen.blit(desc_skin, (257, 100))  # Dibuja la descripción de la skin en la pantalla
    screen.blit(desc_skin2, (235, 360))  # Dibuja la descripción de la skin en la pantalla
    screen.blit(desc_skin3, (200, 400))  # Dibuja la descripción de la skin en la pantalla
    screen.blit(desc_skin4, (175, 420))  # Dibuja la descripción de la skin en la pantalla
    screen.blit(desc_skin5, (190, 440))  # Dibuja la descripción de la skin en la pantalla
    screen.blit(preview, (290, 135))  # Dibuja el preview del jugador en la pantalla




    boton_siguiente_opcion.draw(screen)  # Dibuja el botón en la pantalla
    boton_seleccionar.draw(screen)  # Dibuja el botón en la pantalla

tiempo_juego.start()

def boombox() :
     global estado_anterior
     if estado!= estado_anterior : 
          if (estado == 'menu' or estado == 'opciones') and \
               (estado_anterior == 'menu' or estado_anterior == 'opciones'):
               pass  # No se detiene ni se reinicia la música
          else : 
               pg.mixer.stop()
               if estado== 'menu': 
                    musica_menu.play(-1)  
               elif estado=="puntajes" : 
                    musica_puntajes.play(-1)
     estado_anterior=estado
while True:
#cambiador de estado
    print(estado)
    boombox()
    if estado == "juego":  # Si el estado es "juego", se muestra la pantalla de juego
        tiempo_juego.reanudar()
        pantalla_juego()
        primera_vez = False

    elif estado == "seleccion_personaje":  # Si el estado es "creacion_niveles", se muestra la pantalla de creación de niveles
        pantalla_seleccion_jugador()
    elif estado=="menu" : 
        pantalla_titulo()
    elif estado=="opciones" : 
         pantalla_opciones()
    elif estado== "puntajes" : 
         pantalla_puntajes()
    for event in pg.event.get():
        if event.type == pg.QUIT:
            tiempo_juego.detener()
            pg.quit()
            sys.exit()
        elif event.type == pg.KEYDOWN : 
              if estado== "menu" : 
                    if event.key == pg.K_BACKSPACE:
                         bara_texto = bara_texto[:-1]
                    else:
                         bara_texto += event.unicode           
    pg.display.flip()
    reloj.tick(60)

#TODO : benja
#cambiar powerups para aferctar varas del player
#agregar healthbar de boss
#agregar puntaje 
#c
